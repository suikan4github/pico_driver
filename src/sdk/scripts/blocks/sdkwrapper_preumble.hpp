/**
 * @file sdkwrapper.hpp
 * @brief Wrapper for RasPi Pico SDK API.
 * @copyright COPYRIGHT 2024 Seiichi Horie
 * @details
 * This file is generated by the scripts in the
 * src/sdk/scripts.
 * To re-generate, run :
 * @code
 * export PICO_SDK_PATH=/your/path/to/sdk
 * generate_wrapper.sh
 * @endcode
 */

#ifndef PICO_DRIVER_SRC_SDK_SDKWRAPPER_HPP_
#define PICO_DRIVER_SRC_SDK_SDKWRAPPER_HPP_

#if __has_include("pico/stdlib.h")
// For Pico
#include "pico/stdlib.h"
#include "pico_sdk_headers.h"

#else
// Alternative include and definition for Unix/Win32
#include <stdint.h>
#include <stdlib.h>

#include "pico_api_alternate_defs.hpp"
#ifdef _MSC_VER
typedef unsigned int uint;
#endif
#endif

#if __has_include(<gmock/gmock.h>)
#include <gmock/gmock.h>
#endif

/**
 * @brief Collection of the RP2040/RP2350 control.
 *
 */
namespace rpp_driver {
/**
 * @brief Wrapper class for the RasPi Pico SDK functions.
 * @details
 * The member function declaration follow the SDK APIs. Also, the doxygen
 * comments are copied from the RasPi Pico SDK source code.
 *
 * This wrapper class is convenient for the dependency injection to allow
 * the unit test.
 *
 * The mock of this class is declared in the same file with this class.
  * ### Usage of mock
 * In the case of the testing of the user program which uses this class,
 * a programmer can use the pre-defined mock class
 * ::rpp_driver::MockSdkWrapper inside sdkwrapper.hpp.
 *
 * ```cpp
#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "sdk/sdkwrapper.hpp"

class UserCodeTest : public ::testing::Test {
 protected:
  ::rpp_driver::MockSdkWrapper mock_sdk_;
};

TEST_F(UserCodeTest, foo) {
  // Write Test code here.
}
 * ```
 */
class SdkWrapper {
 public:
  virtual ~SdkWrapper() {}